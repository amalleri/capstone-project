// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates - done
const Verifier = artifacts.require('Verifier');

contract('TestSquareVerifier', accounts => {

    const account = accounts[0];
    const correctProof = require('../../zokrates/code/square/proof');
    const incorrectProof = require('../../zokrates/code/square/incorrect_proof');

    describe('Test ZoKrates Verifier Contract', () => {

        before(async () => { 
            this.contract = await Verifier.new({from: account});
        });

        // Test verification with correct proof - done
        // - use the contents from proof.json generated from zokrates steps
        it('Test verification with correct proof', async () => {
            let verifyResult = await this.contract.verifyTx.call(
                correctProof.proof.A,
                correctProof.proof.A_p,
                correctProof.proof.B,
                correctProof.proof.B_p,
                correctProof.proof.C,
                correctProof.proof.C_p,
                correctProof.proof.H,
                correctProof.proof.K,
                correctProof.input
            );
            assert.equal(verifyResult, true, 'Test verification failed');
        });

        // Test verification with incorrect proof - done
        it('Test verification with invalid proof', async () => {
            let revert = false;
            try{

                await this.contract.verifyTx.call(
                    incorrectProof.proof.A,
                    incorrectProof.proof.A_p,
                    incorrectProof.proof.B,
                    incorrectProof.proof.B_p,
                    incorrectProof.proof.C,
                    incorrectProof.proof.C_p,
                    incorrectProof.proof.H,
                    incorrectProof.proof.K,
                    incorrectProof.input);

            }catch(Error){
                revert = true;
            }

            assert.equal(revert, true, 'Test verification is incorrect');
        });
    
    });

});
